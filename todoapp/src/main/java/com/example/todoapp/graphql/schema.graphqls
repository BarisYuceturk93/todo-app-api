type UserData {
    id: ID!
    name: String!
    surname: String!
    username: String!
    password: String!
    email: String!
    roles: [String]!
    role: String!
    workItemList: [WorkItem]!
}

type WorkItem {
    id: ID!
    taskName: String!
    taskExplanation: String!
    isCompleted: Boolean!
    updateDate: String!
    createDate: String!
    userlist: [UserData]!
}

type Query {
    getUserById(id: ID!): UserData
    getAllUsers: [UserData]
    getWorkItemById(id: ID!): WorkItem
    getAllWorkItems: [WorkItem]
}

type Mutation {
    createUser(input: CreateUserInput!): UserData
    updateUser(id: ID!, input: UpdateUserInput!): UserData
    deleteUser(id: ID!): ID!
    createWorkItem(input: CreateWorkItemInput!): WorkItem
    updateWorkItem(id: ID!, input: UpdateWorkItemInput!): WorkItem
    deleteWorkItem(id: ID!): ID!
}

input CreateUserInput {
    name: String!
    surname: String!
    username: String!
    password: String!
    email: String!
    roles: [String]!
    role: String!
}

input UpdateUserInput {
    name: String
    surname: String
    username: String
    password: String
    email: String
    roles: [String]
    role: String
}

input CreateWorkItemInput {
    taskName: String!
    taskExplanation: String!
    isCompleted: Boolean!
    updateDate: String!
    createDate: String!
    userIds: [ID]!
}

input UpdateWorkItemInput {
    taskName: String
    taskExplanation: String
    isCompleted: Boolean
    updateDate: String
    createDate: String
    userIds: [ID]
}
